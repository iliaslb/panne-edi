// Panne EDI - Game Logic

// Game state
let gameState = {
    currentScenario: 0,
    totalKarma: 0,
    maxKarma: 0, // Will be calculated based on all possible positive karma
    timerInterval: null,
    timerDuration: 30000, // 30 seconds per scenario
    digitalTimerInterval: null,
    gameMode: 'complete', // 'quick' or 'complete'
    scenarioIndices: [], // Will hold the indices of scenarios to show based on game mode
    isMuted: true // Audio starts muted by default
};

// Audio elements
const backgroundMusic = document.getElementById('background-music');
const buttonClick = document.getElementById('button-click');
const muteButton = document.getElementById('mute-button');
const muteIcon = muteButton.querySelector('.mute-icon');

// Audio functions
function toggleMute() {
    gameState.isMuted = !gameState.isMuted;
    updateMuteState();
}

function updateMuteState() {
    backgroundMusic.muted = gameState.isMuted;
    buttonClick.muted = gameState.isMuted;
    muteIcon.textContent = gameState.isMuted ? 'üîá' : 'üîä';
}

function playButtonSound() {
    if (!gameState.isMuted) {
        buttonClick.currentTime = 0;
        buttonClick.play();
    }
}

// Initialize audio
function initAudio() {
    // Set initial volume levels
    backgroundMusic.volume = 0.3;
    buttonClick.volume = 0.5;
    
    // Update initial mute state
    updateMuteState();
    
    // Add click handler for mute button
    muteButton.addEventListener('click', () => {
        toggleMute();
        playButtonSound();
    });
    
    // Add click sound to all buttons
    document.querySelectorAll('button').forEach(button => {
        if (button !== muteButton) {
            button.addEventListener('click', playButtonSound);
        }
    });
}

// Quick mode scenario indices (questions 1, 3, 4, 8, 9, 10)
const quickModeIndices = [0, 2, 3, 7, 8, 9];

// DOM Elements for karma display
const currentKarmaDisplay = document.getElementById('current-karma');
const maxKarmaDisplay = document.getElementById('max-karma');
const digitalTimer = document.getElementById('digital-timer');

// Function to update karma display
function updateKarmaDisplay() {
    currentKarmaDisplay.textContent = gameState.totalKarma;
    maxKarmaDisplay.textContent = gameState.maxKarma;
}

// Loading messages
const loadingMessages = [
    "Connexion √† l'esprit d'√©quipe...",
    "Nettoyage des jugements h√¢tifs...",
    "D√©compression des tensions...",
    "Chargement des situations sociales explosives...",
    "Connexion au canal Slack...",
    "Chargement du respect mutuel‚Ä¶",
    "Synchronisation des accents et des noms prononc√©s correctement‚Ä¶",
    "√âcrasement de la hi√©rarchie invisible‚Ä¶",
    "Chargement des sc√©narios √† haute tension sociale‚Ä¶"
];

// Scenarios data
const scenarios = [
    {
        text: "Marc propose une r√©union au pub. Le√Øla ne dit rien. Sarah baisse les yeux. Maxime est d√©j√† en train de commander.",
        choices: [
            {
                text: "\"Parfait ! Un peu d'alcool, beaucoup de productivit√©.\"",
                karma: -15,
                feedback: "Inclusion ? Jamais entendu."
            },
            {
                text: "\"Tout le monde est √† l'aise avec ce lieu ? Sinon on peut changer.\"",
                karma: 15,
                feedback: "Respect + initiative = leader doux et efficace."
            },
            {
                text: "\"On fait √ßa au parc. C'est inclusif, et y'a des √©cureuils.\"",
                karma: 10,
                feedback: "Une solution originale et apaisante. Tu gagnes un karma nature."
            }
        ],
        patch: {
            mechanic: "Un lieu per√ßu comme \"neutre\" par certains peut √™tre excluant pour d'autres : religion, sobri√©t√©, anxi√©t√©, culture‚Ä¶ Ces facteurs p√®sent dans le silence des non-dits.",
            edi: "Principe 1 ‚Äì Lieu d'√©change<br>Principe 3 ‚Äì Espace s√ªr<br>V√©rifier que tout le monde est √† l'aise = Respecter les diversit√©s invisibles = Favoriser la pleine participation, m√™me hors cadre formel"
        }
    },
    {
        text: "Sarah s'exprime avec un accent. Marc souffle : \"J'comprends rien, c'est lourd.\" Maxime reformule tout ce qu'elle dit en rigolant.",
        choices: [
            {
                text: "\"Ouais, on va faire plus simple, Sarah tu peux √©crire au pire.\"",
                karma: -25,
                feedback: "Tu viens de muter une voix."
            },
            {
                text: "\"Tu veux reformuler Sarah ? On est l√† pour t'√©couter.\"",
                karma: 15,
                feedback: "Tu viens de rebrancher le canal humain."
            },
            {
                text: "\"Elle parle mieux que moi quand j'essaie de lire un README.md.\"",
                karma: 10,
                feedback: "Humour bien plac√©. D√©tente + inclusion."
            }
        ],
        patch: {
            mechanic: "Les compliments biais√©s (genre, origine, √¢ge‚Ä¶) sont en r√©alit√© des microagressions : Ils sous-entendent qu'une r√©ussite est \"surprenante\" et sapent la l√©gitimit√© de la personne vis√©e.",
            edi: "Principe 2 ‚Äì √âgalit√© des chances<br>Principe 4 ‚Äì Moteur de cr√©ativit√©<br>Reconna√Ætre la comp√©tence sans biais = Renforcer la confiance = Lutter contre les st√©r√©otypes = Favoriser une culture de m√©rite juste"
        }
    },
    {
        text: "Sarah a √©crit un super algorithme. Marc commente : \"Wow‚Ä¶ pour une fille en g√©nie, c'est impressionnant !\" Silence g√™n√©. Maxime ricane dans son hoodie.",
        choices: [
            {
                text: "\"C'est vrai ! Genre, elle code mieux que moi, c'est bizarre.\"",
                karma: -30,
                feedback: "Bravo, tu viens de lancer une microagression d√©guis√©e en fleur."
            },
            {
                text: "\"Tu veux dire qu'elle est impressionnante. Point.\"",
                karma: 15,
                feedback: "Tu viens d'√©teindre le feu avec une phrase sobre et classe."
            },
            {
                text: "\"Marc, t'as activ√© le module Sexisme Involontaire v1.4. Mets √† jour.\"",
                karma: 10,
                feedback: "Tu viens de patcher le bug social avec humour tech."
            }
        ],
        patch: {
            mechanic: "Rire aux d√©pens d'une autre n'est jamais anodin. Ce geste renforce l'exclusion, affaiblit la s√©curit√© psychologique et ab√Æme durablement la confiance au sein de l'√©quipe.",
            edi: "Principe 3 ‚Äì Espace s√ªr<br>‚Ä¢Reconnaissance des diff√©rences comportementales et de la neurodiversit√©<br>Refuser la moquerie, c'est prot√©ger l'int√©grit√© d'un membre et envoyer un message fort : Ici, on respecte tout le monde."
        }
    },
    {
        text: "R√©union. Nora, timide, propose une id√©e a voix basse: \"On pourrait peut-√™tre‚Ä¶\" Marc l'interrompt: \"On n'entend pas! Faut t'imposer un peu ! Sinon on va jamais avancer.\" Silence. Malaise.",
        choices: [
            {
                text: "\"Il a raison, faut oser parler. Sinon on reste invisible.\"",
                karma: -20,
                feedback: "Tu viens renforcer la pression sociale sans comprendre le fond."
            },
            {
                text: "\"Elle parlait. Fallait juste √©couter.\"",
                karma: 20,
                feedback: "Tu viens de rappeler que la communication, c'est pas juste une question de volume"
            },
            {
                text: "\"et si on faisait un tour de parole ?\"",
                karma: 15,
                feedback: "Tu propose une solution simple, mais puissante pour l'inclusion."
            }
        ],
        patch: {
            mechanic: "Tout le monde ne communique pas de la m√™me mani√®re. L'EDI, c'est aussi donner de la place aux voix calmes, sans qu'elles soient invisibilis√©es par les plus affirm√©es.",
            edi: "Principe 1 ‚Äì Lieu d'√©change<br>Principe 3 ‚Äì Espace s√ªr<br>Proposer un tour de parole = Assurer l'√©quit√© d'expression = R√©duire les interruptions = Valoriser la diversit√© des styles d'interaction"
        }
    },
    {
        text: "En pr√©sentation, Sarah a des tics nerveux. Marc mime ses gestes derri√®re elle. Maxime filme.",
        choices: [
            {
                text: "\"Faut bien rire un peu, non ?\"",
                karma: -30,
                feedback: "Tu viens de valider l'humiliation."
            },
            {
                text: "\"Tu fais quoi l√† ? C'est pas dr√¥le.\"",
                karma: 15,
                feedback: "Tu viens de couper net la moquerie."
            },
            {
                text: "\"Tu veux qu'on parle de ton pitch sur le tableau blanc chelou ?\"",
                karma: 10,
                feedback: "T'as d√©tourn√© le malaise pour prot√©ger. Respect."
            }
        ],
        patch: {
            mechanic: "Un conflit non r√©solu, m√™me discret, affaiblit la dynamique de groupe. L'EDI, c'est aussi reconna√Ætre que les tensions impactent tout le monde, pas seulement les personnes en d√©saccord.",
            edi: "Principe 1 ‚Äì Lieu d'√©change<br>Principe 5 ‚Äì Mobilisation pour l'action<br>Favoriser une discussion ouverte = Cr√©er un climat o√π les d√©saccords peuvent exister sans casser le lien. √âcoute et m√©diation = Pratiques inclusives, tout comme la r√©partition √©quitable des t√¢ches"
        }
    },
    {
        text: "Marc et Sarah ont eu un d√©saccord sur le code. Depuis, silence radio entre eux. Maxime dit : \"C'est chill, ils vont s'arranger seuls.\"",
        choices: [
            {
                text: "\"Ils sont grands. Nous, on avance.\"",
                karma: -15,
                feedback: "Tu viens d'activer la technique de l'autruche."
            },
            {
                text: "\"On en parle ensemble ? Le projet c'est pas juste du code.\"",
                karma: 15,
                feedback: "T'as d√©samorc√© un conflit naissant. T'es un peu le m√©diateur en hoodie."
            },
            {
                text: "\"On fait un fight club ? Premier round : architecture vs logique floue.\"",
                karma: 5,
                feedback: "L'humour peut soulager‚Ä¶ ou mettre de l'huile sur le feu."
            }
        ],
        patch: {
            mechanic: "Les tensions non adress√©es fragilisent la dynamique. M√™me quand elles ne sont pas \"techniques\", elles ont un impact r√©el sur la collaboration, la motivation et la qualit√© du travail.",
            edi: "Principe 1 : Lieu d'√©change<br>Principe 5 : Mobilisation pour l'action<br>Reconnaissance de l'impact du conflit sur l'√©quipe, Cr√©ation d'un cadre inclusif de resolution, Proposition d'un √©change collectif, Passage du chacun-pour-soi √† la responsabilit√© partag√©e."
        }
    },
    {
        text: "Pendant un brainstorm, Sarah propose une id√©e. Silence. Deux minutes plus tard, Marc dit la m√™me chose. Maxime : \"Excellente id√©e !\"",
        choices: [
            {
                text: "\"Ouais, c'est mieux dit comme √ßa.\"",
                karma: -20,
                feedback: "Tu viens de ghoster une id√©e en live."
            },
            {
                text: "\"Sarah l'a dit avant. C'√©tait d√©j√† une bonne id√©e.\"",
                karma: 15,
                feedback: "Tu viens de restaurer une voix effac√©e."
            },
            {
                text: "\"La m√™me id√©e, mais version white male. Styl√©.\"",
                karma: 10,
                feedback: "T'as mis le doigt sur le bug social avec punch."
            }
        ],
        patch: {
            mechanic: "Entendre ‚â† √âcouter. Valider une id√©e uniquement quand elle est dite par une personne per√ßue comme \"l√©gitime\" r√©v√®le un biais inconscient de genre ou de statut.",
            edi: "Principe 2 ‚Äì √âgalit√© des chances<br>Principe 4 ‚Äì Moteur de cr√©ativit√©<br>Corriger ce biais, c'est rendre visibles les contributions invisibilis√©es et valoriser les id√©es √† √©galit√©, peu importe qui les √©met."
        }
    },
    {
        text: "Le√Øla dit : \"Je suis ultra stress√©e par l'oral.\" Maxime : \"C'est pas un TEDx, respire.\" Marc : \"Tu lis ta slide et √ßa passe.\"",
        choices: [
            {
                text: "\"Ouais ben, c'est qu'un oral.\"",
                karma: -15,
                feedback: "Tu viens de r√©duire une temp√™te √† un nuage."
            },
            {
                text: "\"T'inqui√®te. On peut r√©p√©ter ensemble si tu veux ?\"",
                karma: 15,
                feedback: "Tu viens d'installer l'antidote √† l'angoisse."
            },
            {
                text: "\"Maxime, t'√©tais en panique pour un pop quiz. Chill.\"",
                karma: 10,
                feedback: "Tu viens de recadrer un faux zen."
            }
        ],
        patch: {
            mechanic: "Minimiser l'anxi√©t√© d'un membre, m√™me sans mauvaise intention, c'est nier une r√©alit√© √©motionnelle. Le soutien concret et l'√©coute active sont des piliers de la bienveillance, surtout dans les moments d'exposition.",
            edi: "Principe 3 ‚Äì Espace s√ªr<br>Principe 1 ‚Äì Lieu d'√©change<br>Proposer une r√©p√©tition ou un accompagnement, c'est int√©grer les diff√©rences √©motionnelles dans la collaboration. Cela permet de renforcer la pleine participation, m√™me sous pression."
        }
    },
    {
        text: "L'√©quipe propose d'aller faire du laser tag. Sarah h√©site, elle se d√©place en fauteuil. Maxime : \"Tu peux regarder et encourager !\"",
        choices: [
            {
                text: "\"On peut trouver une activit√© o√π tout le monde participe.\"",
                karma: 15,
                feedback: "Tu viens de proposer une solution inclusive qui valorise la participation de tous."
            },
            {
                text: "\"Tu peux filmer ? C'est fun aussi.\"",
                karma: -20,
                feedback: "Tu viens de rel√©guer Sarah √† un r√¥le passif, renfor√ßant son exclusion."
            },
            {
                text: "\"On te met dans un char d'assaut, fa√ßon Mario Kart ?\"",
                karma: 10,
                feedback: "Tu proposes une adaptation cr√©ative qui permet l'inclusion avec humour."
            }
        ],
        patch: {
            mechanic: "Proposer une activit√© o√π tout le monde peut participer activement, c'est un r√©flexe d'√©quit√©. Inclure, ce n'est pas juste inviter : c'est adapter, repenser, co-construire.",
            edi: "Accessibilit√© universelle<br>Principe 2 ‚Äì √âgalit√© des chances<br>Principe 5 ‚Äì Mobilisation pour l'action<br>Changer d'activit√© par souci d'inclusion, c'est traduire l'intention EDI en action concr√®te, en particulier dans les espaces informels."
        }
    },
    {
        text: "L'√©quipe jase en d√©but de rencontre. Sarah dit tranquillement : \"J'ai repris mes √©tudes apr√®s 12 ans dans le domaine.\" Marc sourit : \"Respect. Mais t'es pas trop rouill√©e pour tout √ßa ?\" Maxime ajoute : \"Au moins t'es l√† pour l'√©quilibre g√©n√©rationnel !\" Le√Øla regarde Sarah, un peu mal √† l'aise.",
        choices: [
            {
                text: "\"C'est cool d'avoir une vision‚Ä¶ plus mature. Genre mentor.\"",
                karma: -20,
                feedback: "Tu viens de coller une √©tiquette passive-agressive. L'exp√©rience ne rime pas avec st√©r√©otype de sage silencieuse."
            },
            {
                text: "\"Tu dois avoir un recul de fou sur ce qu'on fait. Tu veux partager ?\"",
                karma: 15,
                feedback: "Tu viens de transformer un pr√©jug√© en levier d'apprentissage partag√©. Respect sur deux g√©n√©rations."
            },
            {
                text: "\"Si on fait une r√©tro, tu nous files un 'storytime' √† l'ancienne ?\"",
                karma: 10,
                feedback: "Humour bien plac√© + valorisation implicite = ambiance inter-√¢ge valid√©e."
            }
        ],
        patch: {
            mechanic: "Avoir un parcours atypique, une reconversion ou un √¢ge diff√©rent ne devrait jamais faire de quelqu'un un ¬´ ph√©nom√®ne ¬ª ou une mascotte. L'inclusion, c'est savoir reconna√Ætre la valeur r√©elle de chacun¬∑e, sans tomber dans l'infantilisation ni l'exag√©ration.",
            edi: "Principe 4 ‚Äì Inclusion comme moteur de cr√©ativit√©<br>Principe 2 ‚Äì √âgalit√© des chances<br>Valorisation des comp√©tences et de la vision de Sarah<br>Exp√©rience per√ßue comme richesse collective<br>Refus de la normalisation des √©carts."
        }
    }
];

// Calculate maximum possible karma
function calculateMaxKarma() {
    let maxKarma = 0;
    scenarios.forEach(scenario => {
        let bestChoice = -Infinity;
        scenario.choices.forEach(choice => {
            if (choice.karma > bestChoice) {
                bestChoice = choice.karma;
            }
        });
        if (bestChoice > 0) {
            maxKarma += bestChoice;
        }
    });
    return maxKarma;
}

// Profiles based on final score
const profiles = [
    {
        min: 0,
        max: 30,
        title: "Le Microagressionniste 1.0",
        description: "\"Tu crois √™tre gentil, mais t'as oubli√© d'√©couter.\""
    },
    {
        min: 31,
        max: 60,
        title: "Le Suiveur passif",
        description: "\"Tu n'as pas d√©rang√©‚Ä¶ mais pas aid√© non plus.\""
    },
    {
        min: 61,
        max: 85,
        title: "Le M√©diateur masqu√©",
        description: "\"Tu veux bien faire. Et parfois, tu y arrives vraiment.\""
    },
    {
        min: 86,
        max: 100,
        title: "L'Architecte de l'√©quilibre",
        description: "\"Tu construis du lien. Ton karma est pur. Respect.\""
    }
];

// DOM Elements
const welcomeScreen = document.getElementById('welcome-screen');
const modeSelectionScreen = document.getElementById('mode-selection-screen');
const loadingScreen = document.getElementById('loading-screen');

// Initialize audio when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    initGame();
    initAudio();
});
const scenarioScreen = document.getElementById('scenario-screen');
const feedbackScreen = document.getElementById('feedback-screen');
const patchScreen = document.getElementById('patch-screen');
const finalScreen = document.getElementById('final-screen');

const startButton = document.getElementById('start-button');
const quickModeButton = document.getElementById('quick-mode-button');
const completeModeButton = document.getElementById('complete-mode-button');
const nextButton = document.getElementById('next-button');
const continueButton = document.getElementById('continue-button');
const restartButton = document.getElementById('restart-button');

const loadingText = document.getElementById('loading-text');
const loadingBar = document.querySelector('.loading-bar');
const scenarioText = document.getElementById('scenario-text');
const choicesContainer = document.getElementById('choices');
const timerBar = document.querySelector('.timer-bar');

const choiceResult = document.getElementById('choice-result');
const karmaChange = document.getElementById('karma-change');
const feedbackText = document.getElementById('feedback-text');

const patchMechanic = document.getElementById('patch-mechanic');
const patchEdi = document.getElementById('patch-edi');

const finalScore = document.getElementById('final-score');
const profileTitle = document.getElementById('profile-title');
const profileDescription = document.getElementById('profile-description');

// Event Listeners for game controls
startButton.addEventListener('click', showModeSelection);
quickModeButton.addEventListener('click', () => selectGameMode('quick'));
completeModeButton.addEventListener('click', () => selectGameMode('complete'));
nextButton.addEventListener('click', showPatchScreen);
continueButton.addEventListener('click', nextScenario);
restartButton.addEventListener('click', restartGame);

// Initialize the game
function initGame() {
    gameState.maxKarma = calculateMaxKarma();
    updateKarmaDisplay();
}

// Show mode selection screen
function showModeSelection() {
    switchScreen(welcomeScreen, modeSelectionScreen);
}

// Select game mode and start the game
function selectGameMode(mode) {
    gameState.gameMode = mode;
    
    // Hide the footer quote
    document.querySelector('footer').style.display = 'none';
    
    // Start background music
    backgroundMusic.play();
    
    // Set up scenario indices based on selected mode
    if (mode === 'quick') {
        gameState.scenarioIndices = [...quickModeIndices];
    } else {
        // For complete mode, include all scenarios
        gameState.scenarioIndices = Array.from({ length: scenarios.length }, (_, i) => i);
    }
    
    // Reset game state
    gameState.currentScenario = 0;
    gameState.totalKarma = 0;
    
    // Calculate max karma for the selected mode
    let modeMaxKarma = 0;
    gameState.scenarioIndices.forEach(index => {
        let bestChoice = -Infinity;
        scenarios[index].choices.forEach(choice => {
            if (choice.karma > bestChoice) {
                bestChoice = choice.karma;
            }
        });
        if (bestChoice > 0) {
            modeMaxKarma += bestChoice;
        }
    });
    gameState.maxKarma = modeMaxKarma;
    updateKarmaDisplay();
    
    // Start the game
    switchScreen(modeSelectionScreen, loadingScreen);
    startLoadingSequence();
}

// Loading sequence
function startLoadingSequence() {
    let currentMessage = 0;
    let progress = 0;
    
    loadingText.textContent = loadingMessages[0];
    
    const loadingInterval = setInterval(() => {
        progress += 2;
        loadingBar.style.width = `${progress}%`;
        
        if (progress >= 100) {
            clearInterval(loadingInterval);
            showScenario();
            return;
        }
        
        if (progress % 20 === 0 && currentMessage < loadingMessages.length - 1) {
            currentMessage++;
            let displayedMessages = loadingMessages.slice(0, currentMessage + 1).join('<br>');
            loadingText.innerHTML = displayedMessages;
        }
    }, 100);
}

// Show current scenario
function showScenario() {
    // Check if we've gone through all scenarios for the selected mode
    if (gameState.currentScenario >= gameState.scenarioIndices.length) {
        showFinalScore();
        return;
    }
    
    // Get the actual scenario index from our scenario indices array
    const scenarioIndex = gameState.scenarioIndices[gameState.currentScenario];
    const scenario = scenarios[scenarioIndex];
    
    switchScreen(loadingScreen, scenarioScreen);
    scenarioText.textContent = scenario.text;
    
    // Clear previous choices
    choicesContainer.innerHTML = '';
    
    // Add choices
    scenario.choices.forEach((choice, index) => {
        const button = document.createElement('button');
        button.classList.add('choice-button');
        button.textContent = choice.text;
        button.dataset.index = index;
        button.addEventListener('click', () => makeChoice(index));
        choicesContainer.appendChild(button);
    });
    
    // Start timer
    startTimer();
}

// Start timer for scenario
function startTimer() {
    clearInterval(gameState.timerInterval);
    clearInterval(gameState.digitalTimerInterval);
    
    timerBar.style.width = '100%';
    
    let timeLeft = gameState.timerDuration;
    const startTime = Date.now();
    
    // Update digital timer display
    function updateDigitalTimer(remaining) {
        const seconds = Math.ceil(remaining / 1000);
        digitalTimer.textContent = seconds;
    }
    
    updateDigitalTimer(timeLeft);
    
    gameState.timerInterval = setInterval(() => {
        const elapsed = Date.now() - startTime;
        const remaining = Math.max(0, timeLeft - elapsed);
        const percentage = (remaining / gameState.timerDuration) * 100;
        
        timerBar.style.width = `${percentage}%`;
        updateDigitalTimer(remaining);
        
        if (percentage <= 0) {
            clearInterval(gameState.timerInterval);
            clearInterval(gameState.digitalTimerInterval);
            // Add 0 karma when no choice is made
            makeChoice(-1);
        }
    }, 100);
}

// Make a choice
function makeChoice(choiceIndex) {
    clearInterval(gameState.timerInterval);
    clearInterval(gameState.digitalTimerInterval);
    
    const scenarioIndex = gameState.scenarioIndices[gameState.currentScenario];
    const scenario = scenarios[scenarioIndex];
    let choice;
    
    if (choiceIndex === -1) {
        // No choice made in time
        choice = {
            text: "Temps √©coul√© - Aucune r√©ponse",
            karma: 0,
            feedback: "L'ind√©cision a un co√ªt. Parfois, ne pas choisir est un choix en soi."
        };
    } else {
        choice = scenario.choices[choiceIndex];
    }
    
    // Update karma
    gameState.totalKarma += choice.karma;
    updateKarmaDisplay();
    
    // Show feedback
    switchScreen(scenarioScreen, feedbackScreen);
    choiceResult.textContent = choice.text;
    
    if (choice.karma > 0) {
        karmaChange.textContent = `‚Üí +${choice.karma} karma`;
        karmaChange.className = 'karma-change positive';
    } else {
        karmaChange.textContent = `‚Üí ${choice.karma} karma`;
        karmaChange.className = 'karma-change negative';
    }
    
    feedbackText.textContent = choice.feedback;
}

// Show patch screen
function showPatchScreen() {
    const scenarioIndex = gameState.scenarioIndices[gameState.currentScenario];
    const scenario = scenarios[scenarioIndex];
    
    switchScreen(feedbackScreen, patchScreen);
    patchMechanic.innerHTML = scenario.patch.mechanic;
    patchEdi.innerHTML = scenario.patch.edi;
}

// Go to next scenario
function nextScenario() {
    gameState.currentScenario++;
    
    if (gameState.currentScenario >= gameState.scenarioIndices.length) {
        showFinalScore();
    } else {
        switchScreen(patchScreen, scenarioScreen);
        showScenario();
    }
}

// Show final score
function showFinalScore() {
    switchScreen(patchScreen, finalScreen);
    
    // Calculate percentage score
    const scorePercentage = Math.max(0, Math.min(100, Math.round((gameState.totalKarma / gameState.maxKarma) * 100)));
    
    finalScore.textContent = `Score de karma √âDI: ${scorePercentage}/100`;
    
    // Determine profile
    let profile = profiles[0];
    for (const p of profiles) {
        if (scorePercentage >= p.min && scorePercentage <= p.max) {
            profile = p;
            break;
        }
    }
    
    profileTitle.textContent = profile.title;
    profileDescription.textContent = profile.description;
}

// Restart the game
function restartGame() {
    // Reset game state
    gameState.currentScenario = 0;
    gameState.totalKarma = 0;
    gameState.scenarioIndices = [];
    
    // Show the footer quote again
    document.querySelector('footer').style.display = '';
    
    // Return to welcome screen to allow mode selection again
    switchScreen(finalScreen, welcomeScreen);
}

// Helper function to switch screens
function switchScreen(fromScreen, toScreen) {
    fromScreen.classList.remove('active');
    toScreen.classList.add('active');
}
